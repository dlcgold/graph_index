diff --git a/main.cpp b/main.cpp
index a70b37c..5560b7c 100644
--- a/main.cpp
+++ b/main.cpp
@@ -8,11 +8,15 @@
 
 #include "gcsa/gcsa.h"
 #include "gcsa/lcp.h"
+#include "gcsa/support.h"
 #include "kseq.h"
 
 #include "argument_parser.hpp"
 
 KSEQ_INIT(gzFile, gzread)
+typedef std::uint64_t node_type;
+typedef std::uint64_t size_type;
+typedef std::pair<size_type, size_type> range_type;
 
 static const char RCN[128] = {
     0,   0,   0, 0,   0,   0,   0,   0,   0,   0,   //  0
@@ -138,46 +142,107 @@ bool load_batch(kseq_t *seq, vector<tuple<string, string, string>> &input) {
   return l < 0;
 }
 
+vector<string> split(string input, string delimiter) {
+
+  vector<string> tokens;
+  size_t pos = 0;
+  string token;
+
+  while ((pos = input.find(delimiter)) != string::npos) {
+    token = input.substr(0, pos);
+    tokens.push_back(token);
+    input.erase(0, pos + 1);
+  }
+
+  tokens.push_back(input);
+
+  return tokens;
+}
+
 int main(int argc, char *argv[]) {
   parse_arguments(argc, argv);
 
-  cerr << "Loading the index..";
+  // cerr << "Loading the index..";
   ifstream ifs;
   ifs.open(opt::index_path, std::ifstream::in);
   gcsa::GCSA index;
   index.load(ifs);
   ifs.close();
-  cerr << " Done." << endl;
+  // cerr << " Done." << endl;
 
   vector<tuple<string, string, string>> input(opt::b);
   vector<vector<pair<int, int>>> output(opt::b);
 
   gzFile fp = gzopen(opt::fx_path.c_str(), "r");
   kseq_t *seq = kseq_init(fp);
-  int i = 0;
-  int n = 1;
   bool is_last_batch = false;
-  while (!is_last_batch) {
-    cerr << "Loading   batch " << n << ".."
-         << "\r";
-    is_last_batch = load_batch(seq, input);
-    cerr << "Analyzing batch " << n << ".."
-         << "\r";
-#pragma omp parallel for num_threads(opt::t)
-    for (i = 0; i < input.size(); ++i) {
-      query(index, get<1>(input[i]), opt::f, output[i]);
+  kseq_t *ks = kseq_init(fp);
+  int l, i;
+  int r_c = 0;
+  // std::cout << "order: " << index.order() << "\n";
+  while ((l = kseq_read(ks)) >= 0) {
+    std::string p = ks->seq.s;
+    std::string name = ks->name.s;
+    auto nn = split(name, ">");
+    auto nnn = nn[0];
+    range_type range = index.find(p);
+    // std::cout << nnn << " -> [" << range.first << ", " << range.second << "]:
+    // ";
+    std::vector<node_type> results;
+    index.locate(range, results);
+    for (auto r : results) {
+      // std::cout << gcsa::Node::id(r) << " ";
+      std::cout << "@" << nnn << "\t" << gcsa::Node::id(r) << "\n";
     }
-    cerr << "Dumping   batch " << n << ".."
-         << "\r";
-    for (i = 0; i < input.size(); ++i) {
-      dump(input[i], output[i]);
-    }
-    ++n;
+    // std::cout << std::endl;
   }
-  cerr << "Dumped " << n - 1 << " batches. Done." << endl;
 
   kseq_destroy(seq);
   gzclose(fp);
 
   return 0;
 }
+
+// int main(int argc, char *argv[]) {
+//   parse_arguments(argc, argv);
+
+//   cerr << "Loading the index..";
+//   ifstream ifs;
+//   ifs.open(opt::index_path, std::ifstream::in);
+//   gcsa::GCSA index;
+//   index.load(ifs);
+//   ifs.close();
+//   cerr << " Done." << endl;
+
+//   vector<tuple<string, string, string>> input(opt::b);
+//   vector<vector<pair<int, int>>> output(opt::b);
+
+//   gzFile fp = gzopen(opt::fx_path.c_str(), "r");
+//   kseq_t *seq = kseq_init(fp);
+//   int i = 0;
+//   int n = 1;
+//   bool is_last_batch = false;
+//   while (!is_last_batch) {
+//     cerr << "Loading   batch " << n << ".."
+//          << "\r";
+//     is_last_batch = load_batch(seq, input);
+//     cerr << "Analyzing batch " << n << ".."
+//          << "\r";
+// #pragma omp parallel for num_threads(opt::t)
+//     for (i = 0; i < input.size(); ++i) {
+//       query(index, get<1>(input[i]), opt::f, output[i]);
+//     }
+//     cerr << "Dumping   batch " << n << ".."
+//          << "\r";
+//     for (i = 0; i < input.size(); ++i) {
+//       dump(input[i], output[i]);
+//     }
+//     ++n;
+//   }
+//   cerr << "Dumped " << n - 1 << " batches. Done." << endl;
+
+//   kseq_destroy(seq);
+//   gzclose(fp);
+
+//   return 0;
+// }
